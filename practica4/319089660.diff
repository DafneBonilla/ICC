diff --git a/src/main/java/mx/unam/ciencias/icc/Estudiante.java b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
index 2e6fcc0..0c7d8df 100644
--- a/src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -27,6 +27,10 @@ public class Estudiante {
                       double promedio,
                       int    edad) {
         // Aquí va su código.
+        this.nombre = nombre;
+        this.cuenta = cuenta;
+        this.promedio = promedio;
+        this.edad = edad;
     }
 
     /**
@@ -35,6 +39,7 @@ public class Estudiante {
      */
     public String getNombre() {
         // Aquí va su código.
+        return nombre;
     }
 
     /**
@@ -43,6 +48,7 @@ public class Estudiante {
      */
     public void setNombre(String nombre) {
         // Aquí va su código.
+        this.nombre = nombre;
     }
 
     /**
@@ -51,6 +57,7 @@ public class Estudiante {
      */
     public int getCuenta() {
         // Aquí va su código.
+        return cuenta;
     }
 
     /**
@@ -59,6 +66,7 @@ public class Estudiante {
      */
     public void setCuenta(int cuenta) {
         // Aquí va su código.
+        this.cuenta = cuenta;
     }
 
     /**
@@ -67,6 +75,7 @@ public class Estudiante {
      */
     public double getPromedio() {
         // Aquí va su código.
+        return promedio;
     }
 
     /**
@@ -75,6 +84,7 @@ public class Estudiante {
      */
     public void setPromedio(double promedio) {
         // Aquí va su código.
+        this.promedio = promedio;
     }
 
     /**
@@ -83,6 +93,7 @@ public class Estudiante {
      */
     public int getEdad() {
         // Aquí va su código.
+        return edad;
     }
 
     /**
@@ -91,6 +102,7 @@ public class Estudiante {
      */
     public void setEdad(int edad) {
         // Aquí va su código.
+        this.edad = edad;
     }
 
     /**
@@ -99,6 +111,12 @@ public class Estudiante {
      */
     @Override public String toString() {
         // Aquí va su código.
+        String cadena = String.format("Nombre   : %s\n" +
+                                      "Cuenta   : %09d\n" +
+                                      "Promedio : %2.2f\n" +
+                                      "Edad     : %d",
+                                      nombre, cuenta, promedio, edad);
+                                      return cadena;
     }
 
     /**
@@ -114,5 +132,12 @@ public class Estudiante {
             return false;
         Estudiante estudiante = (Estudiante)objeto;
         // Aquí va su código.
+        if (estudiante.nombre.equals(nombre) && estudiante.cuenta==cuenta &&
+        estudiante.edad==edad && estudiante.promedio==promedio) {
+            return true;
+        }
+        else {
+          return false;
+      }
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/Lista.java b/src/main/java/mx/unam/ciencias/icc/Lista.java
index 106877b..a7a3588 100644
--- a/src/main/java/mx/unam/ciencias/icc/Lista.java
+++ b/src/main/java/mx/unam/ciencias/icc/Lista.java
@@ -27,6 +27,7 @@ public class Lista {
         /* Construye un nodo con un elemento. */
         private Nodo(Object elemento) {
             // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -35,6 +36,7 @@ public class Lista {
          */
         public Nodo getAnterior() {
             // Aquí va su código.
+            return anterior;
         }
 
         /**
@@ -43,6 +45,7 @@ public class Lista {
          */
         public Nodo getSiguiente() {
             // Aquí va su código.
+            return siguiente;
         }
 
         /**
@@ -51,6 +54,7 @@ public class Lista {
          */
         public Object get() {
             // Aquí va su código.
+            return elemento;
         }
     }
 
@@ -67,8 +71,127 @@ public class Lista {
      */
     public int getLongitud() {
         // Aquí va su código.
+        return longitud;
     }
 
+    //Métodos auxiliares
+
+    //Método auxiliar para buscar un nodo
+    private Nodo buscaNodo(Nodo n, Object buscado){ 
+        if (n != null){
+            if(n.elemento.equals(buscado)){
+                return n;
+            }
+            return buscaNodo(n.siguiente, buscado);
+        }
+        return null;
+    }
+
+    //Polimorfismo de buscaNodo
+    private Nodo buscaNodo(Object buscado){ 
+        Nodo n = cabeza;
+        n = buscaNodo(n, buscado);
+        return n;
+    }
+
+    //Método auxiliar para buscar un índice 
+    private Nodo buscaNodoIndice(Nodo n, int indiceBuscado, int i){ 
+        if (n != null){
+            if(i == indiceBuscado){
+                return n;
+            }
+            return buscaNodoIndice(n.siguiente, indiceBuscado, ++i);
+        }
+        return null;
+    }
+
+    //Polimorfismo de buscaNodoIndice 
+    private Nodo buscaNodoIndice(int i){ 
+        int a = 0;
+        Nodo n = cabeza;
+        n = buscaNodoIndice(n, i, a);
+        return n;
+    }
+
+    //Método auxiliar para eliminar un nodo 
+    private void eliminarNodo(Nodo porEliminar){ 
+        Nodo s;
+        Nodo a;
+        if (rabo == cabeza) {
+            cabeza = rabo = null;
+            longitud = 0;
+        }
+        else if (porEliminar == cabeza) {
+            s = porEliminar.siguiente;
+            s.anterior = null;
+            cabeza = s;
+            longitud --;
+        }
+        else if (porEliminar == rabo){
+            s = porEliminar.anterior;
+            s.siguiente = null;
+            rabo = s;
+            longitud --;
+        }
+        else {
+            a = porEliminar.anterior;
+            s = porEliminar.siguiente;
+            a.siguiente = s;
+            s.anterior = a;
+            longitud --;
+        }
+    }
+
+    //Método auxiliar recursivo del método reversa
+    private Lista auxiliarReversa(Nodo n, Lista lista){
+        if (n == null){
+            return lista;
+        }
+        lista.agregaInicio(n.elemento);
+        return auxiliarReversa(n.siguiente, lista);
+    }
+
+    //Método auxiliar recursivo del método copia
+    private Lista auxiliarCopia(Nodo n, Lista lista){
+        if (n == null){
+            return lista;
+        }
+        lista.agregaFinal(n.elemento);
+        return auxiliarCopia(n.siguiente, lista);
+    }
+
+    //Método auxiliar recursivo para toString
+    private String auxiliarToString(Nodo n, String s){
+	    if ( n != rabo ) {
+		    s += String.format("%s, ", n.elemento);
+		    return auxiliarToString(n.siguiente, s);
+	    }
+	    return s;
+    }
+
+    //Método auxiliar recursivo para para indiceDe
+    private int auxiliarIndiceDe(Object elemento, int a, Nodo n){
+        if (n != null){
+            if(n.elemento.equals(elemento))
+                return a;
+            return auxiliarIndiceDe(elemento, ++a, n.siguiente);
+        }
+        return -1;
+    }
+
+    //Método auxiliar recursivo para equals
+    private boolean auxiliarEquals(Lista lista, Nodo n, Nodo s){
+        if (n != null){
+            if(n.elemento.equals(s.elemento)){
+            	return auxiliarEquals(lista,n.siguiente, s.siguiente);
+	    }else{
+                return false;
+	    }
+        }
+        return true;
+    }
+
+
     /**
      * Nos dice si la lista es vacía.
      * @return <code>true</code> si la lista es vacía, <code>false</code> en
@@ -76,6 +199,12 @@ public class Lista {
      */
     public boolean esVacia() {
         // Aquí va su código.
+        if (cabeza != null){ 
+            return false;
+        }
+        else {
+          return true;
+        }
     }
 
     /**
@@ -86,6 +215,17 @@ public class Lista {
      */
     public void agregaFinal(Object elemento) {
         // Aquí va su código.
+        if (elemento == null)
+            return;
+        longitud ++;
+        Nodo n = new Nodo(elemento);
+        if (rabo == null){
+            rabo = cabeza = n;
+        } else {
+          rabo.siguiente = n;
+          n.anterior = rabo;
+          rabo = n;
+        }
     }
 
     /**
@@ -96,6 +236,17 @@ public class Lista {
      */
     public void agregaInicio(Object elemento) {
         // Aquí va su código.
+        if (elemento == null)
+            return;
+        longitud ++;
+        Nodo n = new Nodo(elemento);
+        if (rabo == null){
+            rabo = cabeza = n;
+        } else {
+          cabeza.anterior = n;
+          n.siguiente = cabeza;
+          cabeza = n;
+        }
     }
 
     /**
@@ -114,6 +265,26 @@ public class Lista {
      */
     public void inserta(int i, Object elemento) {
         // Aquí va su código.
+        if (elemento == null){
+            return;
+        }
+        if (i <= 0){
+            agregaInicio(elemento);
+        }
+        else if (i >= longitud){
+            agregaFinal(elemento);
+        }
+        else {
+            Nodo s = buscaNodoIndice(i);
+            Nodo n = new Nodo(elemento);
+            Nodo a;
+            a = s.anterior;
+            n.anterior = a;
+            a.siguiente = n;
+            n.siguiente = s;
+            s.anterior = n;
+            longitud ++;
+        }
     }
 
     /**
@@ -123,6 +294,14 @@ public class Lista {
      */
     public void elimina(Object elemento) {
         // Aquí va su código.
+        if (elemento == null){
+            return;
+        }
+        Nodo marcado = buscaNodo(elemento);
+        if (marcado == null){
+            return;
+        }
+        eliminarNodo(marcado); 
     }
 
     /**
@@ -132,6 +311,21 @@ public class Lista {
      */
     public Object eliminaPrimero() {
         // Aquí va su código.
+        if (cabeza == null){
+            return null;
+        }
+        Object n;
+        n = cabeza.elemento;
+        if(rabo == cabeza){
+            rabo = cabeza = null;
+            longitud = 0;
+        }
+        if (cabeza != null){
+            cabeza = cabeza.siguiente;
+            cabeza.anterior = null;
+            longitud --;
+        }
+        return n;
     }
 
     /**
@@ -141,6 +335,21 @@ public class Lista {
      */
     public Object eliminaUltimo() {
         // Aquí va su código.
+        if (cabeza == null){
+            return null;
+        }
+        Object n;
+        n = rabo.elemento;
+        if(rabo == cabeza){
+            rabo = cabeza = null;
+            longitud = 0;
+        }
+        if (rabo != null){
+            rabo = rabo.anterior;
+            rabo.siguiente = null;
+            longitud --;
+        }
+        return n;
     }
 
     /**
@@ -151,6 +360,14 @@ public class Lista {
      */
     public boolean contiene(Object elemento) {
         // Aquí va su código.
+        if(elemento == null){
+            return false;
+        }
+        Nodo n = buscaNodo(elemento);
+        if(n == null){
+            return false;
+        }
+        return true;
     }
 
     /**
@@ -159,6 +376,7 @@ public class Lista {
      */
     public Lista reversa() {
         // Aquí va su código.
+        return auxiliarReversa(cabeza, new Lista());
     }
 
     /**
@@ -168,6 +386,7 @@ public class Lista {
      */
     public Lista copia() {
         // Aquí va su código.
+        return auxiliarCopia(cabeza, new Lista());
     }
 
     /**
@@ -175,6 +394,8 @@ public class Lista {
      */
     public void limpia() {
         // Aquí va su código.
+        cabeza = rabo = null;
+        longitud = 0;
     }
 
     /**
@@ -184,6 +405,10 @@ public class Lista {
      */
     public Object getPrimero() {
         // Aquí va su código.
+        if (cabeza == null)
+            return null;
+        else 
+            return cabeza.elemento;
     }
 
     /**
@@ -193,6 +418,10 @@ public class Lista {
      */
     public Object getUltimo() {
         // Aquí va su código.
+        if (rabo == null)
+            return null;
+        else 
+            return rabo.elemento;
     }
 
     /**
@@ -204,6 +433,11 @@ public class Lista {
      */
     public Object get(int i) {
         // Aquí va su código.
+        if (i < 0 || i >= longitud)
+            return null;
+        Nodo b;
+        b = buscaNodoIndice(i);
+        return b.elemento;
     }
 
     /**
@@ -214,6 +448,7 @@ public class Lista {
      */
     public int indiceDe(Object elemento) {
         // Aquí va su código.
+        return auxiliarIndiceDe(elemento, 0, cabeza);
     }
 
     /**
@@ -222,6 +457,13 @@ public class Lista {
      */
     @Override public String toString() {
         // Aquí va su código.
+        if ( cabeza == null) 
+		    return "[]";
+	    String s;
+	    Nodo n = cabeza;
+	    s = auxiliarToString(n, "[");
+	    s += String.format("%s]", rabo.elemento);
+	    return s;
     }
 
     /**
@@ -235,6 +477,9 @@ public class Lista {
             return false;
         Lista lista = (Lista)objeto;
         // Aquí va su código.
+        if (longitud != lista.longitud)
+            return false;
+        return auxiliarEquals(lista, cabeza, lista.cabeza);
     }
 
     /**
@@ -243,6 +488,7 @@ public class Lista {
      */
     public Nodo getCabeza() {
         // Aquí va su código.
+        return cabeza;
     }
 
     /**
@@ -251,5 +497,6 @@ public class Lista {
      */
     public Nodo getRabo() {
         // Aquí va su código.
+        return rabo;
     }
 }
